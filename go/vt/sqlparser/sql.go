//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const UNDERSCORE_UTF8MB4 = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const CONSTRAINT = 57455
const SPATIAL = 57456
const FULLTEXT = 57457
const FOREIGN = 57458
const REFERENCES = 57459
const KEY_BLOCK_SIZE = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const BEGIN = 57480
const START = 57481
const TRANSACTION = 57482
const COMMIT = 57483
const ROLLBACK = 57484
const BIT = 57485
const TINYINT = 57486
const SMALLINT = 57487
const MEDIUMINT = 57488
const INT = 57489
const INTEGER = 57490
const BIGINT = 57491
const INTNUM = 57492
const REAL = 57493
const DOUBLE = 57494
const FLOAT_TYPE = 57495
const DECIMAL = 57496
const NUMERIC = 57497
const TIME = 57498
const TIMESTAMP = 57499
const DATETIME = 57500
const YEAR = 57501
const CHAR = 57502
const VARCHAR = 57503
const BOOL = 57504
const CHARACTER = 57505
const VARBINARY = 57506
const NCHAR = 57507
const TEXT = 57508
const TINYTEXT = 57509
const MEDIUMTEXT = 57510
const LONGTEXT = 57511
const BLOB = 57512
const TINYBLOB = 57513
const MEDIUMBLOB = 57514
const LONGBLOB = 57515
const JSON = 57516
const ENUM = 57517
const GEOMETRY = 57518
const POINT = 57519
const LINESTRING = 57520
const POLYGON = 57521
const GEOMETRYCOLLECTION = 57522
const MULTIPOINT = 57523
const MULTILINESTRING = 57524
const MULTIPOLYGON = 57525
const NULLX = 57526
const AUTO_INCREMENT = 57527
const APPROXNUM = 57528
const SIGNED = 57529
const UNSIGNED = 57530
const ZEROFILL = 57531
const COLLATION = 57532
const DATABASES = 57533
const TABLES = 57534
const VITESS_KEYSPACES = 57535
const VITESS_SHARDS = 57536
const VITESS_TABLETS = 57537
const VSCHEMA_TABLES = 57538
const FULL = 57539
const PROCESSLIST = 57540
const COLUMNS = 57541
const NAMES = 57542
const CHARSET = 57543
const GLOBAL = 57544
const SESSION = 57545
const ISOLATION = 57546
const LEVEL = 57547
const READ = 57548
const WRITE = 57549
const ONLY = 57550
const REPEATABLE = 57551
const COMMITTED = 57552
const UNCOMMITTED = 57553
const SERIALIZABLE = 57554
const CURRENT_TIMESTAMP = 57555
const DATABASE = 57556
const CURRENT_DATE = 57557
const CURRENT_TIME = 57558
const LOCALTIME = 57559
const LOCALTIMESTAMP = 57560
const UTC_DATE = 57561
const UTC_TIME = 57562
const UTC_TIMESTAMP = 57563
const REPLACE = 57564
const CONVERT = 57565
const CAST = 57566
const SUBSTR = 57567
const SUBSTRING = 57568
const GROUP_CONCAT = 57569
const SEPARATOR = 57570
const MATCH = 57571
const AGAINST = 57572
const BOOLEAN = 57573
const LANGUAGE = 57574
const WITH = 57575
const QUERY = 57576
const EXPANSION = 57577
const UNUSED = 57578

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"REFERENCES",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 36,
	153, 269,
	154, 269,
	-2, 261,
	-1, 246,
	111, 596,
	-2, 592,
	-1, 247,
	111, 597,
	-2, 593,
	-1, 317,
	81, 759,
	-2, 59,
	-1, 318,
	81, 719,
	-2, 60,
	-1, 323,
	81, 701,
	-2, 558,
	-1, 325,
	81, 740,
	-2, 560,
	-1, 591,
	53, 42,
	55, 42,
	-2, 44,
	-1, 726,
	111, 599,
	-2, 595,
	-1, 937,
	5, 29,
	-2, 403,
	-1, 962,
	5, 28,
	-2, 533,
	-1, 1187,
	5, 29,
	-2, 534,
	-1, 1232,
	5, 28,
	-2, 536,
	-1, 1296,
	5, 29,
	-2, 537,
}

const yyPrivate = 57344

const yyLast = 10776

var yyAct = [...]int{

	247, 1287, 876, 538, 662, 1193, 1243, 240, 788, 1094,
	806, 251, 1095, 1122, 828, 225, 1025, 827, 870, 585,
	837, 583, 277, 55, 789, 1091, 965, 981, 322, 1016,
	761, 78, 929, 903, 1068, 191, 758, 691, 191, 751,
	777, 728, 841, 601, 470, 476, 420, 1028, 970, 600,
	537, 3, 217, 316, 785, 866, 304, 490, 856, 587,
	482, 572, 824, 303, 191, 191, 78, 278, 49, 249,
	191, 313, 78, 234, 311, 54, 1320, 1307, 552, 1318,
	911, 1294, 850, 1315, 877, 302, 1306, 1086, 1293, 1181,
	424, 445, 238, 1253, 1117, 1118, 218, 219, 220, 221,
	224, 59, 1130, 1131, 1132, 820, 821, 893, 1116, 819,
	1135, 1133, 186, 182, 183, 184, 989, 49, 602, 988,
	603, 892, 990, 223, 222, 230, 61, 62, 63, 64,
	65, 308, 1268, 503, 502, 512, 513, 505, 506, 507,
	508, 509, 510, 511, 504, 461, 1007, 514, 849, 897,
	1206, 462, 459, 433, 1221, 447, 857, 449, 891, 1170,
	1168, 1069, 216, 456, 457, 1317, 253, 503, 502, 512,
	513, 505, 506, 507, 508, 509, 510, 511, 504, 1314,
	191, 514, 191, 446, 448, 1288, 1280, 1049, 191, 786,
	842, 434, 1244, 1071, 427, 191, 179, 1251, 180, 78,
	78, 78, 78, 180, 78, 1246, 670, 888, 885, 886,
	844, 884, 78, 844, 661, 930, 980, 807, 809, 430,
	844, 979, 978, 185, 422, 1073, 1046, 1077, 194, 1072,
	307, 1070, 1048, 181, 473, 477, 1075, 895, 898, 760,
	1273, 78, 1000, 526, 527, 1074, 1190, 1055, 945, 421,
	1139, 495, 478, 468, 923, 700, 494, 440, 1076, 1078,
	504, 825, 514, 514, 697, 444, 451, 451, 451, 451,
	1278, 451, 890, 1134, 1245, 466, 467, 857, 905, 451,
	1149, 479, 489, 968, 488, 487, 539, 1292, 1036, 487,
	604, 1269, 808, 778, 889, 550, 1252, 1250, 49, 692,
	1140, 489, 191, 1088, 843, 489, 778, 843, 952, 191,
	191, 191, 665, 523, 843, 78, 525, 1034, 1005, 840,
	838, 78, 836, 839, 1282, 842, 1047, 735, 1045, 718,
	720, 721, 894, 480, 719, 920, 921, 922, 436, 437,
	438, 733, 734, 732, 536, 896, 540, 541, 542, 543,
	544, 545, 546, 547, 548, 904, 551, 553, 553, 553,
	553, 553, 553, 553, 553, 561, 562, 563, 564, 554,
	555, 556, 557, 558, 559, 560, 584, 484, 846, 693,
	1298, 426, 1035, 847, 1212, 592, 598, 1040, 1037, 1030,
	1031, 1038, 1033, 1032, 505, 506, 507, 508, 509, 510,
	511, 504, 276, 178, 514, 1039, 1211, 1020, 1019, 488,
	487, 1042, 703, 704, 1008, 524, 1090, 507, 508, 509,
	510, 511, 504, 1300, 78, 514, 489, 1279, 1228, 52,
	191, 191, 78, 76, 191, 942, 699, 191, 1036, 731,
	752, 191, 753, 78, 78, 78, 78, 78, 78, 78,
	78, 1209, 941, 1052, 940, 428, 429, 78, 78, 488,
	487, 1017, 1236, 1316, 191, 1276, 301, 1034, 321, 679,
	488, 487, 695, 698, 425, 307, 489, 21, 1303, 469,
	1236, 1285, 78, 1126, 488, 487, 191, 489, 1125, 488,
	487, 451, 78, 452, 705, 715, 716, 1236, 1248, 451,
	1001, 489, 1236, 469, 1236, 1237, 489, 1202, 1201, 469,
	451, 451, 451, 451, 451, 451, 451, 451, 1113, 469,
	729, 677, 996, 726, 451, 451, 1189, 469, 1146, 1145,
	1142, 1143, 1035, 1142, 1141, 229, 78, 1040, 1037, 1030,
	1031, 1038, 1033, 1032, 935, 469, 966, 991, 539, 722,
	879, 768, 769, 754, 707, 1039, 676, 770, 773, 319,
	675, 1029, 23, 779, 569, 469, 1257, 191, 763, 469,
	191, 191, 191, 191, 191, 724, 666, 664, 659, 442,
	790, 435, 191, 611, 610, 191, 960, 421, 1256, 191,
	961, 765, 1136, 49, 191, 191, 755, 756, 78, 782,
	763, 321, 321, 321, 321, 1185, 321, 967, 540, 775,
	52, 78, 823, 595, 321, 814, 502, 512, 513, 505,
	506, 507, 508, 509, 510, 511, 504, 792, 793, 514,
	795, 23, 56, 791, 1058, 765, 794, 308, 308, 308,
	308, 308, 803, 492, 1092, 309, 812, 966, 811, 817,
	569, 816, 584, 967, 810, 596, 947, 594, 832, 1231,
	23, 308, 191, 568, 730, 78, 813, 78, 594, 944,
	244, 191, 935, 569, 191, 78, 1148, 872, 935, 52,
	188, 1144, 992, 858, 859, 860, 818, 935, 569, 597,
	701, 191, 52, 191, 191, 231, 966, 1308, 1216, 663,
	946, 851, 852, 853, 854, 855, 909, 910, 52, 477,
	312, 868, 869, 943, 871, 423, 1127, 321, 863, 864,
	865, 1129, 1107, 606, 574, 577, 578, 579, 575, 726,
	576, 580, 451, 706, 451, 995, 307, 307, 307, 307,
	307, 867, 451, 52, 971, 972, 874, 912, 862, 861,
	913, 307, 67, 1092, 1021, 729, 974, 673, 463, 713,
	307, 512, 513, 505, 506, 507, 508, 509, 510, 511,
	504, 936, 977, 514, 925, 267, 266, 269, 270, 271,
	272, 766, 767, 800, 268, 273, 953, 774, 801, 798,
	1178, 762, 764, 924, 799, 802, 976, 578, 579, 797,
	796, 781, 1312, 783, 784, 235, 236, 780, 319, 1305,
	908, 78, 1054, 1311, 191, 483, 918, 951, 917, 471,
	1012, 609, 443, 1183, 1004, 431, 321, 432, 78, 1284,
	481, 472, 1283, 439, 321, 984, 962, 805, 1229, 983,
	441, 985, 993, 975, 1002, 321, 321, 321, 321, 321,
	321, 321, 321, 963, 964, 997, 1217, 881, 672, 321,
	321, 582, 986, 503, 502, 512, 513, 505, 506, 507,
	508, 509, 510, 511, 504, 78, 78, 514, 78, 232,
	233, 308, 998, 999, 709, 483, 226, 916, 1262, 227,
	56, 1261, 1018, 1219, 492, 915, 967, 321, 464, 730,
	690, 78, 485, 1270, 1207, 696, 58, 60, 593, 53,
	1, 1009, 1010, 1053, 878, 191, 1024, 887, 1286, 1011,
	1242, 1013, 1014, 1015, 78, 528, 529, 530, 531, 532,
	533, 534, 535, 1041, 1121, 835, 1027, 826, 757, 419,
	1051, 66, 1277, 451, 834, 833, 1249, 567, 771, 771,
	1205, 845, 919, 1006, 771, 848, 591, 1128, 1281, 1062,
	1089, 1061, 1003, 616, 78, 78, 1067, 614, 451, 1093,
	615, 771, 790, 1087, 726, 1104, 1105, 1080, 790, 1106,
	307, 1079, 1108, 613, 1096, 618, 617, 612, 725, 1102,
	202, 1103, 1101, 78, 314, 78, 78, 581, 605, 934,
	321, 873, 486, 68, 1044, 1043, 883, 1114, 932, 1120,
	1119, 1115, 933, 321, 1098, 949, 460, 1124, 204, 937,
	938, 939, 191, 522, 914, 987, 320, 1099, 948, 1097,
	78, 49, 702, 954, 475, 955, 956, 957, 958, 1260,
	1218, 950, 549, 78, 191, 776, 1109, 1110, 1111, 252,
	78, 574, 577, 578, 579, 575, 78, 576, 580, 191,
	717, 971, 972, 265, 262, 264, 263, 321, 708, 321,
	959, 496, 1137, 1138, 250, 667, 668, 321, 242, 671,
	1159, 1150, 674, 306, 1158, 1157, 565, 573, 571, 570,
	973, 319, 1166, 969, 1152, 305, 1057, 1155, 1182, 1180,
	1267, 712, 25, 321, 829, 539, 57, 237, 78, 694,
	78, 78, 78, 191, 78, 1195, 1196, 1197, 1192, 1184,
	78, 19, 18, 17, 20, 16, 308, 15, 78, 14,
	1200, 714, 1198, 1204, 993, 29, 13, 12, 11, 10,
	9, 8, 7, 6, 5, 4, 228, 22, 78, 78,
	78, 2, 1163, 1164, 1179, 1165, 0, 0, 1167, 0,
	1169, 0, 0, 0, 1215, 1214, 0, 727, 0, 0,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 0, 0, 0, 1066, 0,
	78, 78, 0, 474, 725, 0, 0, 0, 1230, 0,
	1208, 0, 1210, 78, 0, 0, 1203, 0, 1096, 1241,
	0, 0, 787, 982, 0, 451, 1247, 78, 0, 0,
	0, 0, 1258, 1220, 0, 307, 0, 0, 189, 0,
	321, 215, 0, 0, 0, 1112, 0, 78, 0, 1232,
	815, 1271, 0, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 1097, 1096, 241, 1233, 189, 189, 0,
	450, 0, 0, 189, 0, 0, 1290, 0, 0, 1289,
	539, 1254, 0, 1255, 78, 0, 0, 1022, 321, 1295,
	321, 191, 790, 0, 1272, 1259, 0, 0, 0, 78,
	1301, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 49, 0, 321, 1309, 1310, 0, 875, 0, 78,
	0, 0, 0, 0, 1313, 1160, 899, 0, 0, 900,
	0, 829, 1162, 0, 0, 0, 321, 0, 0, 0,
	0, 0, 0, 1171, 1172, 1173, 902, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 321, 0,
	0, 1186, 1187, 1188, 0, 1191, 0, 0, 0, 0,
	0, 0, 0, 771, 0, 0, 1100, 982, 0, 771,
	0, 1026, 0, 189, 0, 189, 0, 0, 0, 0,
	0, 189, 1177, 469, 0, 1319, 0, 0, 189, 0,
	0, 0, 200, 0, 0, 321, 0, 321, 1123, 0,
	0, 0, 0, 0, 926, 927, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 1060, 0, 503,
	502, 512, 513, 505, 506, 507, 508, 509, 510, 511,
	504, 0, 1151, 514, 1227, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 1153, 0, 0, 0, 1238,
	1239, 1240, 1156, 0, 0, 0, 0, 0, 321, 0,
	453, 454, 455, 0, 458, 0, 195, 0, 0, 0,
	0, 0, 465, 197, 0, 0, 1263, 1264, 1265, 1266,
	203, 199, 0, 0, 0, 0, 829, 0, 829, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 189, 589, 189, 0, 0, 0, 201, 0,
	1194, 205, 1194, 1194, 1194, 0, 1199, 0, 0, 0,
	0, 1291, 321, 0, 0, 0, 1296, 0, 0, 0,
	1194, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	1302, 0, 0, 1174, 469, 0, 0, 0, 0, 1060,
	321, 321, 321, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 0, 206, 198, 0, 207,
	208, 209, 210, 214, 0, 1323, 1324, 0, 213, 212,
	503, 502, 512, 513, 505, 506, 507, 508, 509, 510,
	511, 504, 1234, 1235, 514, 0, 0, 0, 0, 0,
	0, 1064, 1065, 0, 0, 1123, 0, 0, 469, 0,
	0, 0, 0, 829, 1081, 1082, 0, 1084, 1085, 1194,
	0, 0, 0, 189, 189, 0, 0, 189, 0, 0,
	189, 0, 0, 0, 678, 0, 0, 0, 0, 1274,
	0, 0, 1026, 829, 503, 502, 512, 513, 505, 506,
	507, 508, 509, 510, 511, 504, 0, 189, 514, 0,
	633, 0, 0, 0, 0, 0, 0, 1147, 0, 0,
	0, 0, 0, 771, 0, 0, 1297, 0, 0, 189,
	0, 0, 0, 0, 660, 0, 0, 0, 678, 1154,
	0, 1304, 669, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 681, 682, 683, 684, 685, 686,
	687, 1194, 0, 0, 0, 0, 0, 688, 689, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 0, 0, 0, 1161, 241, 241, 621, 0, 772,
	772, 241, 0, 0, 0, 772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 241, 241, 241, 0,
	189, 0, 772, 189, 189, 189, 189, 189, 0, 634,
	0, 0, 0, 0, 0, 804, 0, 0, 189, 0,
	0, 0, 589, 0, 0, 0, 0, 189, 189, 0,
	647, 648, 649, 650, 651, 652, 653, 0, 654, 655,
	656, 657, 658, 635, 636, 637, 638, 619, 620, 0,
	0, 622, 0, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 639, 640, 641, 642, 643, 644, 645,
	646, 0, 0, 0, 1175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1222, 1223, 0, 1224, 1225,
	1226, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 189, 503, 502,
	512, 513, 505, 506, 507, 508, 509, 510, 511, 504,
	0, 129, 514, 0, 189, 588, 906, 907, 0, 0,
	97, 0, 0, 0, 678, 0, 111, 0, 113, 0,
	0, 147, 122, 0, 0, 0, 241, 503, 502, 512,
	513, 505, 506, 507, 508, 509, 510, 511, 504, 0,
	190, 514, 590, 0, 0, 880, 1299, 882, 0, 90,
	0, 0, 0, 0, 0, 901, 0, 0, 498, 0,
	501, 0, 0, 0, 0, 0, 515, 516, 517, 518,
	519, 520, 521, 241, 499, 500, 497, 503, 502, 512,
	513, 505, 506, 507, 508, 509, 510, 511, 504, 241,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	1321, 135, 0, 0, 150, 102, 101, 140, 110, 0,
	0, 0, 93, 0, 142, 131, 162, 189, 132, 141,
	114, 154, 136, 161, 193, 169, 152, 168, 80, 151,
	160, 91, 144, 82, 158, 149, 120, 106, 107, 81,
	0, 139, 96, 100, 95, 128, 155, 156, 94, 176,
	85, 167, 84, 86, 166, 127, 153, 159, 121, 118,
	83, 157, 119, 117, 109, 98, 103, 133, 116, 134,
	104, 124, 123, 125, 0, 0, 0, 148, 164, 177,
	88, 0, 0, 170, 171, 172, 173, 0, 0, 89,
	126, 87, 105, 145, 108, 115, 138, 175, 130, 143,
	92, 163, 146, 0, 0, 0, 0, 0, 23, 24,
	50, 26, 27, 0, 0, 0, 0, 0, 189, 0,
	79, 0, 112, 174, 137, 99, 165, 42, 241, 0,
	0, 0, 28, 47, 48, 0, 0, 0, 0, 241,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 678,
	0, 0, 37, 1063, 0, 0, 52, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 931, 0,
	772, 1050, 0, 503, 502, 512, 513, 505, 506, 507,
	508, 509, 510, 511, 504, 0, 0, 514, 503, 502,
	512, 513, 505, 506, 507, 508, 509, 510, 511, 504,
	0, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 43,
	44, 0, 0, 45, 46, 34, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 39, 0,
	40, 41, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 397, 0, 369,
	410, 347, 361, 418, 362, 363, 390, 333, 377, 129,
	359, 0, 350, 328, 356, 329, 348, 371, 97, 374,
	346, 399, 380, 409, 111, 416, 113, 385, 1213, 147,
	122, 0, 0, 373, 401, 375, 395, 368, 391, 338,
	384, 411, 360, 388, 412, 0, 0, 0, 77, 0,
	830, 831, 0, 0, 0, 0, 0, 90, 0, 387,
	406, 358, 389, 327, 386, 0, 331, 334, 417, 404,
	353, 354, 994, 0, 0, 0, 0, 0, 0, 372,
	376, 392, 366, 0, 772, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 189, 0, 0, 335, 332, 0,
	0, 370, 0, 0, 0, 337, 0, 352, 393, 0,
	326, 396, 402, 367, 192, 405, 365, 364, 408, 135,
	0, 0, 150, 102, 101, 140, 110, 400, 349, 357,
	93, 355, 142, 131, 162, 382, 132, 141, 114, 154,
	136, 161, 193, 169, 152, 168, 80, 151, 160, 91,
	144, 82, 158, 149, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 155, 156, 94, 176, 85, 167,
	84, 86, 166, 127, 153, 159, 121, 118, 83, 157,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 330, 0, 148, 164, 177, 88, 345,
	403, 170, 171, 172, 173, 0, 0, 89, 126, 87,
	105, 145, 108, 115, 138, 175, 130, 143, 92, 163,
	146, 341, 344, 339, 340, 378, 379, 413, 414, 415,
	394, 336, 0, 342, 343, 0, 398, 381, 79, 0,
	112, 174, 137, 99, 165, 407, 397, 0, 369, 410,
	347, 361, 418, 362, 363, 390, 333, 377, 129, 359,
	0, 350, 328, 356, 329, 348, 371, 97, 374, 346,
	399, 380, 409, 111, 416, 113, 385, 0, 147, 122,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	411, 360, 388, 412, 0, 0, 0, 77, 0, 830,
	831, 0, 0, 0, 0, 0, 90, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 417, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 383, 0, 0, 0, 335, 332, 0, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 192, 405, 365, 364, 408, 135, 0,
	0, 150, 102, 101, 140, 110, 400, 349, 357, 93,
	355, 142, 131, 162, 382, 132, 141, 114, 154, 136,
	161, 193, 169, 152, 168, 80, 151, 160, 91, 144,
	82, 158, 149, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 155, 156, 94, 176, 85, 167, 84,
	86, 166, 127, 153, 159, 121, 118, 83, 157, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 330, 0, 148, 164, 177, 88, 345, 403,
	170, 171, 172, 173, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 175, 130, 143, 92, 163, 146,
	341, 344, 339, 340, 378, 379, 413, 414, 415, 394,
	336, 0, 342, 343, 0, 398, 381, 79, 0, 112,
	174, 137, 99, 165, 407, 397, 0, 369, 410, 347,
	361, 418, 362, 363, 390, 333, 377, 129, 359, 0,
	350, 328, 356, 329, 348, 371, 97, 374, 346, 399,
	380, 409, 111, 416, 113, 385, 0, 147, 122, 0,
	0, 373, 401, 375, 395, 368, 391, 338, 384, 411,
	360, 388, 412, 52, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 387, 406, 358,
	389, 327, 386, 0, 331, 334, 417, 404, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 372, 376, 392,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 383, 0, 0, 0, 335, 332, 0, 0, 370,
	0, 0, 0, 337, 0, 352, 393, 0, 326, 396,
	402, 367, 192, 405, 365, 364, 408, 135, 0, 0,
	150, 102, 101, 140, 110, 400, 349, 357, 93, 355,
	142, 131, 162, 382, 132, 141, 114, 154, 136, 161,
	193, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 176, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 330, 0, 148, 164, 177, 88, 345, 403, 170,
	171, 172, 173, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 175, 130, 143, 92, 163, 146, 341,
	344, 339, 340, 378, 379, 413, 414, 415, 394, 336,
	0, 342, 343, 0, 398, 381, 79, 0, 112, 174,
	137, 99, 165, 407, 397, 0, 369, 410, 347, 361,
	418, 362, 363, 390, 333, 377, 129, 359, 0, 350,
	328, 356, 329, 348, 371, 97, 374, 346, 399, 380,
	409, 111, 416, 113, 385, 0, 147, 122, 0, 0,
	373, 401, 375, 395, 368, 391, 338, 384, 411, 360,
	388, 412, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 387, 406, 358, 389,
	327, 386, 0, 331, 334, 417, 404, 353, 354, 0,
	0, 0, 0, 0, 0, 0, 372, 376, 392, 366,
	0, 0, 0, 0, 0, 0, 1059, 0, 351, 0,
	383, 0, 0, 0, 335, 332, 0, 0, 370, 0,
	0, 0, 337, 0, 352, 393, 0, 326, 396, 402,
	367, 192, 405, 365, 364, 408, 135, 0, 0, 150,
	102, 101, 140, 110, 400, 349, 357, 93, 355, 142,
	131, 162, 382, 132, 141, 114, 154, 136, 161, 193,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 176, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	330, 0, 148, 164, 177, 88, 345, 403, 170, 171,
	172, 173, 0, 0, 89, 126, 87, 105, 145, 108,
	115, 138, 175, 130, 143, 92, 163, 146, 341, 344,
	339, 340, 378, 379, 413, 414, 415, 394, 336, 0,
	342, 343, 0, 398, 381, 79, 0, 112, 174, 137,
	99, 165, 407, 397, 0, 369, 410, 347, 361, 418,
	362, 363, 390, 333, 377, 129, 359, 0, 350, 328,
	356, 329, 348, 371, 97, 374, 346, 399, 380, 409,
	111, 416, 113, 385, 0, 147, 122, 0, 0, 373,
	401, 375, 395, 368, 391, 338, 384, 411, 360, 388,
	412, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 387, 406, 358, 389, 327,
	386, 0, 331, 334, 417, 404, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 372, 376, 392, 366, 0,
	0, 0, 0, 0, 0, 723, 0, 351, 0, 383,
	0, 0, 0, 335, 332, 0, 0, 370, 0, 0,
	0, 337, 0, 352, 393, 0, 326, 396, 402, 367,
	192, 405, 365, 364, 408, 135, 0, 0, 150, 102,
	101, 140, 110, 400, 349, 357, 93, 355, 142, 131,
	162, 382, 132, 141, 114, 154, 136, 161, 193, 169,
	152, 168, 80, 151, 160, 91, 144, 82, 158, 149,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	155, 156, 94, 176, 85, 167, 84, 86, 166, 127,
	153, 159, 121, 118, 83, 157, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 330,
	0, 148, 164, 177, 88, 345, 403, 170, 171, 172,
	173, 0, 0, 89, 126, 87, 105, 145, 108, 115,
	138, 175, 130, 143, 92, 163, 146, 341, 344, 339,
	340, 378, 379, 413, 414, 415, 394, 336, 0, 342,
	343, 0, 398, 381, 79, 0, 112, 174, 137, 99,
	165, 407, 397, 0, 369, 410, 347, 361, 418, 362,
	363, 390, 333, 377, 129, 359, 0, 350, 328, 356,
	329, 348, 371, 97, 374, 346, 399, 380, 409, 111,
	416, 113, 385, 0, 147, 122, 0, 0, 373, 401,
	375, 395, 368, 391, 338, 384, 411, 360, 388, 412,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 387, 406, 358, 389, 327, 386,
	0, 331, 334, 417, 404, 353, 354, 0, 0, 0,
	0, 0, 0, 0, 372, 376, 392, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 383, 0,
	0, 0, 335, 332, 0, 0, 370, 0, 0, 0,
	337, 0, 352, 393, 0, 326, 396, 402, 367, 192,
	405, 365, 364, 408, 135, 0, 0, 150, 102, 101,
	140, 110, 400, 349, 357, 93, 355, 142, 131, 162,
	382, 132, 141, 114, 154, 136, 161, 193, 169, 152,
	168, 80, 151, 160, 91, 144, 82, 158, 149, 120,
	106, 107, 81, 0, 139, 96, 100, 95, 128, 155,
	156, 94, 176, 85, 167, 84, 86, 166, 127, 153,
	159, 121, 118, 83, 157, 119, 117, 109, 98, 103,
	133, 116, 134, 104, 124, 123, 125, 0, 330, 0,
	148, 164, 177, 88, 345, 403, 170, 171, 172, 173,
	0, 0, 89, 126, 87, 105, 145, 108, 115, 138,
	175, 130, 143, 92, 163, 146, 341, 344, 339, 340,
	378, 379, 413, 414, 415, 394, 336, 0, 342, 343,
	0, 398, 381, 79, 0, 112, 174, 137, 99, 165,
	407, 397, 0, 369, 410, 347, 361, 418, 362, 363,
	390, 333, 377, 129, 359, 0, 350, 328, 356, 329,
	348, 371, 97, 374, 346, 399, 380, 409, 111, 416,
	113, 385, 0, 147, 122, 0, 0, 373, 401, 375,
	395, 368, 391, 338, 384, 411, 360, 388, 412, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 387, 406, 358, 389, 327, 386, 0,
	331, 334, 417, 404, 353, 354, 0, 0, 0, 0,
	0, 0, 0, 372, 376, 392, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 383, 0, 0,
	0, 335, 332, 0, 0, 370, 0, 0, 0, 337,
	0, 352, 393, 0, 326, 396, 402, 367, 192, 405,
	365, 364, 408, 135, 0, 0, 150, 102, 101, 140,
	110, 400, 349, 357, 93, 355, 142, 131, 162, 382,
	132, 141, 114, 154, 136, 161, 193, 169, 152, 168,
	80, 151, 160, 91, 144, 82, 158, 149, 120, 106,
	107, 81, 0, 139, 96, 100, 95, 128, 155, 156,
	94, 176, 85, 167, 84, 86, 166, 127, 153, 159,
	121, 118, 83, 157, 119, 117, 109, 98, 103, 133,
	116, 134, 104, 124, 123, 125, 0, 330, 0, 148,
	164, 177, 88, 345, 403, 170, 171, 172, 173, 0,
	0, 89, 126, 87, 105, 145, 108, 115, 138, 175,
	130, 143, 92, 163, 146, 341, 344, 339, 340, 378,
	379, 413, 414, 415, 394, 336, 0, 342, 343, 0,
	398, 381, 79, 0, 112, 174, 137, 99, 165, 407,
	397, 0, 369, 410, 347, 361, 418, 362, 363, 390,
	333, 377, 129, 359, 0, 350, 328, 356, 329, 348,
	371, 97, 374, 346, 399, 380, 409, 111, 416, 113,
	385, 0, 147, 122, 0, 0, 373, 401, 375, 395,
	368, 391, 338, 384, 411, 360, 388, 412, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 387, 406, 358, 389, 327, 386, 0, 331,
	334, 417, 404, 353, 354, 0, 0, 0, 0, 0,
	0, 0, 372, 376, 392, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 383, 0, 0, 0,
	335, 332, 0, 0, 370, 0, 0, 0, 337, 0,
	352, 393, 0, 326, 396, 402, 367, 192, 405, 365,
	364, 408, 135, 0, 0, 150, 102, 101, 140, 110,
	400, 349, 357, 93, 355, 142, 131, 162, 382, 132,
	141, 114, 154, 136, 161, 193, 169, 152, 168, 80,
	151, 160, 91, 144, 82, 158, 149, 120, 106, 107,
	81, 0, 139, 96, 100, 95, 128, 155, 156, 94,
	176, 85, 167, 84, 324, 166, 127, 153, 159, 121,
	118, 83, 157, 119, 117, 109, 98, 103, 133, 116,
	134, 104, 124, 123, 125, 0, 330, 0, 148, 164,
	177, 88, 345, 403, 170, 171, 172, 173, 0, 0,
	89, 325, 323, 105, 145, 108, 115, 138, 175, 130,
	143, 92, 163, 146, 341, 344, 339, 340, 378, 379,
	413, 414, 415, 394, 336, 0, 342, 343, 0, 398,
	381, 79, 0, 112, 174, 137, 99, 165, 407, 397,
	0, 369, 410, 347, 361, 418, 362, 363, 390, 333,
	377, 129, 359, 0, 350, 328, 356, 329, 348, 371,
	97, 374, 346, 399, 380, 409, 111, 416, 113, 385,
	0, 147, 122, 0, 0, 373, 401, 375, 395, 368,
	391, 338, 384, 411, 360, 388, 412, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 387, 406, 358, 389, 327, 386, 0, 331, 334,
	417, 404, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 372, 376, 392, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 383, 0, 0, 0, 335,
	332, 0, 0, 370, 0, 0, 0, 337, 0, 352,
	393, 0, 326, 396, 402, 367, 192, 405, 365, 364,
	408, 135, 0, 0, 150, 102, 101, 140, 110, 400,
	349, 357, 93, 355, 142, 131, 162, 382, 132, 141,
	114, 154, 136, 161, 193, 169, 152, 168, 80, 151,
	160, 91, 144, 82, 158, 149, 120, 106, 107, 81,
	0, 139, 96, 100, 95, 128, 155, 156, 94, 176,
	85, 167, 84, 86, 166, 127, 153, 159, 121, 118,
	83, 157, 119, 117, 109, 98, 103, 133, 116, 134,
	104, 124, 123, 125, 0, 330, 0, 148, 164, 177,
	88, 345, 403, 170, 171, 172, 173, 0, 0, 89,
	126, 87, 105, 145, 108, 115, 138, 175, 130, 143,
	92, 163, 146, 341, 344, 339, 340, 378, 379, 413,
	414, 415, 394, 336, 0, 342, 343, 0, 398, 381,
	79, 0, 112, 174, 137, 99, 165, 407, 397, 0,
	369, 410, 347, 361, 418, 362, 363, 390, 333, 377,
	129, 359, 0, 350, 328, 356, 329, 348, 371, 97,
	374, 346, 399, 380, 409, 111, 416, 113, 385, 0,
	147, 122, 0, 0, 373, 401, 375, 395, 368, 391,
	338, 384, 411, 360, 388, 412, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	387, 406, 358, 389, 327, 386, 0, 331, 334, 417,
	404, 353, 354, 0, 0, 0, 0, 0, 0, 0,
	372, 376, 392, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 383, 0, 0, 0, 335, 332,
	0, 0, 370, 0, 0, 0, 337, 0, 352, 393,
	0, 326, 396, 402, 367, 192, 405, 365, 364, 408,
	135, 0, 0, 150, 102, 101, 140, 110, 400, 349,
	357, 93, 355, 142, 131, 162, 382, 132, 141, 114,
	154, 136, 161, 193, 169, 152, 168, 80, 151, 599,
	91, 144, 82, 158, 149, 120, 106, 107, 81, 0,
	139, 96, 100, 95, 128, 155, 156, 94, 176, 85,
	167, 84, 324, 166, 127, 153, 159, 121, 118, 83,
	157, 119, 117, 109, 98, 103, 133, 116, 134, 104,
	124, 123, 125, 0, 330, 0, 148, 164, 177, 88,
	345, 403, 170, 171, 172, 173, 0, 0, 89, 325,
	323, 105, 145, 108, 115, 138, 175, 130, 143, 92,
	163, 146, 341, 344, 339, 340, 378, 379, 413, 414,
	415, 394, 336, 0, 342, 343, 0, 398, 381, 79,
	0, 112, 174, 137, 99, 165, 407, 397, 0, 369,
	410, 347, 361, 418, 362, 363, 390, 333, 377, 129,
	359, 0, 350, 328, 356, 329, 348, 371, 97, 374,
	346, 399, 380, 409, 111, 416, 113, 385, 0, 147,
	122, 0, 0, 373, 401, 375, 395, 368, 391, 338,
	384, 411, 360, 388, 412, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 387,
	406, 358, 389, 327, 386, 0, 331, 334, 417, 404,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 372,
	376, 392, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 0, 0, 335, 332, 0,
	0, 370, 0, 0, 0, 337, 0, 352, 393, 0,
	326, 396, 402, 367, 192, 405, 365, 364, 408, 135,
	0, 0, 150, 102, 101, 140, 110, 400, 349, 357,
	93, 355, 142, 131, 162, 382, 132, 141, 114, 154,
	136, 161, 193, 169, 152, 168, 80, 151, 315, 91,
	144, 82, 158, 149, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 155, 156, 94, 176, 85, 167,
	84, 324, 166, 127, 153, 159, 121, 118, 83, 157,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 330, 0, 148, 164, 177, 88, 345,
	403, 170, 171, 172, 173, 0, 0, 89, 325, 323,
	318, 317, 108, 115, 138, 175, 130, 143, 92, 163,
	146, 341, 344, 339, 340, 378, 379, 413, 414, 415,
	394, 336, 0, 342, 343, 0, 398, 381, 79, 0,
	112, 174, 137, 99, 165, 129, 0, 0, 759, 0,
	248, 0, 0, 0, 97, 0, 245, 0, 0, 0,
	111, 288, 113, 0, 0, 147, 122, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 246, 267, 266, 269, 270, 271,
	272, 0, 0, 90, 268, 273, 274, 275, 0, 0,
	243, 260, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 239, 0, 0, 0, 299,
	0, 259, 0, 0, 254, 255, 256, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 297, 0, 135, 0, 0, 150, 102,
	101, 140, 110, 0, 0, 0, 93, 0, 142, 131,
	162, 0, 132, 141, 114, 154, 136, 161, 193, 169,
	152, 168, 80, 151, 160, 91, 144, 82, 158, 149,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	155, 156, 94, 176, 85, 167, 84, 86, 166, 127,
	153, 159, 121, 118, 83, 157, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 148, 164, 177, 88, 0, 0, 170, 171, 172,
	173, 0, 0, 89, 126, 87, 105, 145, 108, 115,
	138, 175, 130, 143, 92, 163, 146, 289, 298, 295,
	296, 293, 294, 292, 291, 290, 300, 281, 282, 283,
	284, 286, 0, 285, 79, 0, 112, 174, 137, 99,
	165, 129, 0, 0, 0, 0, 248, 0, 0, 0,
	97, 0, 245, 0, 0, 0, 111, 288, 113, 0,
	0, 147, 122, 0, 0, 0, 0, 279, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 469,
	246, 267, 266, 269, 270, 271, 272, 0, 0, 90,
	268, 273, 274, 275, 0, 0, 243, 260, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 0, 0, 0, 0, 299, 0, 259, 0, 0,
	254, 255, 256, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 297,
	0, 135, 0, 0, 150, 102, 101, 140, 110, 0,
	0, 0, 93, 0, 142, 131, 162, 0, 132, 141,
	114, 154, 136, 161, 193, 169, 152, 168, 80, 151,
	160, 91, 144, 82, 158, 149, 120, 106, 107, 81,
	0, 139, 96, 100, 95, 128, 155, 156, 94, 176,
	85, 167, 84, 86, 166, 127, 153, 159, 121, 118,
	83, 157, 119, 117, 109, 98, 103, 133, 116, 134,
	104, 124, 123, 125, 0, 0, 0, 148, 164, 177,
	88, 0, 0, 170, 171, 172, 173, 0, 0, 89,
	126, 87, 105, 145, 108, 115, 138, 175, 130, 143,
	92, 163, 146, 289, 298, 295, 296, 293, 294, 292,
	291, 290, 300, 281, 282, 283, 284, 286, 0, 285,
	79, 0, 112, 174, 137, 99, 165, 129, 0, 0,
	0, 0, 248, 0, 0, 0, 97, 0, 245, 0,
	0, 0, 111, 288, 113, 0, 0, 147, 122, 0,
	0, 0, 0, 279, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 246, 267, 266, 269,
	270, 271, 272, 0, 0, 90, 268, 273, 274, 275,
	0, 0, 243, 260, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 239, 0, 0,
	0, 299, 0, 259, 0, 0, 254, 255, 256, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 297, 0, 135, 0, 0,
	150, 102, 101, 140, 110, 0, 0, 0, 93, 0,
	142, 131, 162, 0, 132, 141, 114, 154, 136, 161,
	193, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 176, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 148, 164, 177, 88, 0, 0, 170,
	171, 172, 173, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 175, 130, 143, 92, 163, 146, 289,
	298, 295, 296, 293, 294, 292, 291, 290, 300, 281,
	282, 283, 284, 286, 0, 285, 79, 0, 112, 174,
	137, 99, 165, 129, 0, 0, 0, 0, 248, 0,
	0, 0, 97, 0, 245, 0, 0, 0, 111, 288,
	113, 0, 0, 147, 122, 0, 0, 0, 0, 279,
	280, 0, 0, 0, 0, 0, 0, 822, 0, 52,
	0, 0, 246, 267, 266, 269, 270, 271, 272, 0,
	0, 90, 268, 273, 274, 275, 0, 0, 243, 260,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 0, 0, 0, 0, 299, 0, 259,
	0, 0, 254, 255, 256, 261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 297, 0, 135, 0, 0, 150, 102, 101, 140,
	110, 0, 0, 0, 93, 0, 142, 131, 162, 0,
	132, 141, 114, 154, 136, 161, 193, 169, 152, 168,
	80, 151, 160, 91, 144, 82, 158, 149, 120, 106,
	107, 81, 0, 139, 96, 100, 95, 128, 155, 156,
	94, 176, 85, 167, 84, 86, 166, 127, 153, 159,
	121, 118, 83, 157, 119, 117, 109, 98, 103, 133,
	116, 134, 104, 124, 123, 125, 0, 0, 0, 148,
	164, 177, 88, 0, 0, 170, 171, 172, 173, 0,
	0, 89, 126, 87, 105, 145, 108, 115, 138, 175,
	130, 143, 92, 163, 146, 289, 298, 295, 296, 293,
	294, 292, 291, 290, 300, 281, 282, 283, 284, 286,
	23, 285, 79, 0, 112, 174, 137, 99, 165, 0,
	0, 0, 129, 0, 0, 0, 0, 248, 0, 0,
	0, 97, 0, 245, 0, 0, 0, 111, 288, 113,
	0, 0, 147, 122, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 246, 267, 266, 269, 270, 271, 272, 0, 0,
	90, 268, 273, 274, 275, 0, 0, 243, 260, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 0, 0, 0, 0, 299, 0, 259, 0,
	0, 254, 255, 256, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	297, 0, 135, 0, 0, 150, 102, 101, 140, 110,
	0, 0, 0, 93, 0, 142, 131, 162, 0, 132,
	141, 114, 154, 136, 161, 193, 169, 152, 168, 80,
	151, 160, 91, 144, 82, 158, 149, 120, 106, 107,
	81, 0, 139, 96, 100, 95, 128, 155, 156, 94,
	176, 85, 167, 84, 86, 166, 127, 153, 159, 121,
	118, 83, 157, 119, 117, 109, 98, 103, 133, 116,
	134, 104, 124, 123, 125, 0, 0, 0, 148, 164,
	177, 88, 0, 0, 170, 171, 172, 173, 0, 0,
	89, 126, 87, 105, 145, 108, 115, 138, 175, 130,
	143, 92, 163, 146, 289, 298, 295, 296, 293, 294,
	292, 291, 290, 300, 281, 282, 283, 284, 286, 0,
	285, 79, 0, 112, 174, 137, 99, 165, 129, 0,
	0, 0, 0, 248, 0, 0, 0, 97, 0, 245,
	0, 0, 0, 111, 288, 113, 0, 0, 147, 122,
	0, 0, 0, 0, 279, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 246, 267, 266,
	269, 270, 271, 272, 0, 0, 90, 268, 273, 274,
	275, 0, 0, 243, 260, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 0, 0,
	0, 0, 299, 0, 259, 0, 0, 254, 255, 256,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 297, 0, 135, 0,
	0, 150, 102, 101, 140, 110, 0, 0, 0, 93,
	0, 142, 131, 162, 0, 132, 141, 114, 154, 136,
	161, 193, 169, 152, 168, 80, 151, 160, 91, 144,
	82, 158, 149, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 155, 156, 94, 176, 85, 167, 84,
	86, 166, 127, 153, 159, 121, 118, 83, 157, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 148, 164, 177, 88, 0, 0,
	170, 171, 172, 173, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 175, 130, 143, 92, 163, 146,
	289, 298, 295, 296, 293, 294, 292, 291, 290, 300,
	281, 282, 283, 284, 286, 129, 285, 79, 0, 112,
	174, 137, 99, 165, 97, 0, 0, 0, 0, 0,
	111, 288, 113, 0, 0, 147, 122, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 246, 267, 266, 269, 270, 271,
	272, 0, 0, 90, 268, 273, 274, 275, 0, 0,
	0, 260, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 0, 0, 0, 0, 299,
	0, 259, 0, 0, 254, 255, 256, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 297, 0, 135, 0, 0, 150, 102,
	101, 140, 110, 0, 0, 0, 93, 0, 142, 131,
	162, 1322, 132, 141, 114, 154, 136, 161, 193, 169,
	152, 168, 80, 151, 160, 91, 144, 82, 158, 149,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	155, 156, 94, 176, 85, 167, 84, 86, 166, 127,
	153, 159, 121, 118, 83, 157, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 148, 164, 177, 88, 0, 0, 170, 171, 172,
	173, 0, 0, 89, 126, 87, 105, 145, 108, 115,
	138, 175, 130, 143, 92, 163, 146, 289, 298, 295,
	296, 293, 294, 292, 291, 290, 300, 281, 282, 283,
	284, 286, 129, 285, 79, 0, 112, 174, 137, 99,
	165, 97, 0, 0, 0, 0, 0, 111, 288, 113,
	0, 0, 147, 122, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 246, 267, 266, 269, 270, 271, 272, 0, 0,
	90, 268, 273, 274, 275, 0, 0, 0, 260, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 0, 0, 0, 0, 299, 0, 259, 0,
	0, 254, 255, 256, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	297, 0, 135, 0, 0, 150, 102, 101, 140, 110,
	0, 0, 0, 93, 0, 142, 131, 162, 0, 132,
	141, 114, 154, 136, 161, 193, 169, 152, 168, 80,
	151, 160, 91, 144, 82, 158, 149, 120, 106, 107,
	81, 0, 139, 96, 100, 95, 128, 155, 156, 94,
	176, 85, 167, 84, 86, 166, 127, 153, 159, 121,
	118, 83, 157, 119, 117, 109, 98, 103, 133, 116,
	134, 104, 124, 123, 125, 0, 0, 0, 148, 164,
	177, 88, 0, 0, 170, 171, 172, 173, 0, 0,
	89, 126, 87, 105, 145, 108, 115, 138, 175, 130,
	143, 92, 163, 146, 289, 298, 295, 296, 293, 294,
	292, 291, 290, 300, 281, 282, 283, 284, 286, 129,
	285, 79, 0, 112, 174, 137, 99, 165, 97, 0,
	0, 0, 0, 0, 111, 0, 113, 0, 0, 147,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 502, 512, 513, 505, 506, 507,
	508, 509, 510, 511, 504, 0, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 135,
	0, 0, 150, 102, 101, 140, 110, 0, 0, 0,
	93, 0, 142, 131, 162, 0, 132, 141, 114, 154,
	136, 161, 193, 169, 152, 168, 80, 151, 160, 91,
	144, 82, 158, 149, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 155, 156, 94, 176, 85, 167,
	84, 86, 166, 127, 153, 159, 121, 118, 83, 157,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 0, 0, 148, 164, 177, 88, 0,
	0, 170, 171, 172, 173, 0, 0, 89, 126, 87,
	105, 145, 108, 115, 138, 175, 130, 143, 92, 163,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 491, 0, 0, 0, 79, 97,
	112, 174, 137, 99, 165, 111, 0, 113, 0, 0,
	147, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 493, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 488, 487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	135, 0, 0, 150, 102, 101, 140, 110, 0, 0,
	0, 93, 0, 142, 131, 162, 0, 132, 141, 114,
	154, 136, 161, 193, 169, 152, 168, 80, 151, 160,
	91, 144, 82, 158, 149, 120, 106, 107, 81, 0,
	139, 96, 100, 95, 128, 155, 156, 94, 176, 85,
	167, 84, 86, 166, 127, 153, 159, 121, 118, 83,
	157, 119, 117, 109, 98, 103, 133, 116, 134, 104,
	124, 123, 125, 0, 0, 0, 148, 164, 177, 88,
	0, 0, 170, 171, 172, 173, 0, 0, 89, 126,
	87, 105, 145, 108, 115, 138, 175, 130, 143, 92,
	163, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 79,
	97, 112, 174, 137, 99, 165, 111, 0, 113, 0,
	0, 147, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 69, 0, 0, 0,
	75, 135, 0, 0, 150, 102, 101, 140, 110, 0,
	0, 0, 93, 0, 142, 131, 162, 0, 132, 141,
	114, 154, 136, 161, 71, 169, 152, 168, 80, 151,
	160, 91, 144, 82, 158, 149, 120, 106, 107, 81,
	0, 139, 96, 100, 95, 128, 155, 156, 94, 176,
	85, 167, 84, 86, 166, 127, 153, 159, 121, 118,
	83, 157, 119, 117, 109, 98, 103, 133, 116, 134,
	104, 124, 123, 125, 0, 0, 0, 148, 164, 177,
	88, 0, 0, 170, 171, 172, 173, 0, 0, 89,
	126, 87, 105, 145, 108, 115, 138, 175, 130, 143,
	92, 163, 146, 0, 72, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	79, 0, 112, 174, 137, 99, 165, 97, 0, 0,
	0, 0, 0, 111, 0, 113, 0, 0, 147, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 135, 0,
	0, 150, 102, 101, 140, 110, 0, 0, 0, 93,
	0, 142, 131, 162, 0, 132, 141, 114, 154, 136,
	161, 193, 169, 152, 168, 80, 151, 160, 91, 144,
	82, 158, 149, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 155, 156, 94, 176, 85, 167, 84,
	86, 166, 127, 153, 159, 121, 118, 83, 157, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 148, 164, 177, 88, 0, 0,
	170, 171, 172, 173, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 175, 130, 143, 92, 163, 146,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 79, 0, 112,
	174, 137, 99, 165, 97, 0, 0, 0, 0, 0,
	111, 0, 113, 0, 0, 147, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 135, 0, 0, 150, 102,
	101, 140, 110, 0, 0, 0, 93, 0, 142, 131,
	162, 0, 132, 141, 114, 154, 136, 161, 193, 169,
	152, 168, 80, 151, 160, 91, 144, 82, 158, 149,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	155, 156, 94, 176, 85, 167, 84, 86, 166, 127,
	153, 159, 121, 118, 83, 157, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 148, 164, 177, 88, 0, 0, 170, 171, 172,
	173, 0, 0, 89, 126, 87, 105, 145, 108, 115,
	138, 175, 130, 143, 92, 163, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 79, 97, 112, 174, 137, 99,
	165, 111, 0, 113, 0, 0, 147, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 710, 0,
	0, 711, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 135, 0, 0, 150,
	102, 101, 140, 110, 0, 0, 0, 93, 0, 142,
	131, 162, 0, 132, 141, 114, 154, 136, 161, 193,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 176, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	0, 0, 148, 164, 177, 88, 0, 0, 170, 171,
	172, 173, 0, 0, 89, 126, 87, 105, 145, 108,
	115, 138, 175, 130, 143, 92, 163, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 79, 0, 112, 174, 137,
	99, 165, 97, 0, 608, 0, 0, 0, 111, 0,
	113, 0, 0, 147, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 607, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 135, 0, 0, 150, 102, 101, 140,
	110, 0, 0, 0, 93, 0, 142, 131, 162, 0,
	132, 141, 114, 154, 136, 161, 193, 169, 152, 168,
	80, 151, 160, 91, 144, 82, 158, 149, 120, 106,
	107, 81, 0, 139, 96, 100, 95, 128, 155, 156,
	94, 176, 85, 167, 84, 86, 166, 127, 153, 159,
	121, 118, 83, 157, 119, 117, 109, 98, 103, 133,
	116, 134, 104, 124, 123, 125, 0, 0, 0, 148,
	164, 177, 88, 0, 0, 170, 171, 172, 173, 0,
	0, 89, 126, 87, 105, 145, 108, 115, 138, 175,
	130, 143, 92, 163, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 588, 0,
	0, 0, 79, 97, 112, 174, 137, 99, 165, 111,
	0, 113, 0, 0, 147, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 590, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 135, 0, 0, 150, 102, 101,
	140, 110, 0, 0, 0, 93, 0, 142, 131, 162,
	0, 586, 141, 114, 154, 136, 161, 193, 169, 152,
	168, 80, 151, 160, 91, 144, 82, 158, 149, 120,
	106, 107, 81, 0, 139, 96, 100, 95, 128, 155,
	156, 94, 176, 85, 167, 84, 86, 166, 127, 153,
	159, 121, 118, 83, 157, 119, 117, 109, 98, 103,
	133, 116, 134, 104, 124, 123, 125, 0, 0, 0,
	148, 164, 177, 88, 0, 0, 170, 171, 172, 173,
	0, 0, 89, 126, 87, 105, 145, 108, 115, 138,
	175, 130, 143, 92, 163, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 79, 97, 112, 174, 137, 99, 165,
	111, 0, 113, 0, 0, 147, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 135, 0, 0, 150, 102,
	101, 140, 110, 0, 0, 0, 93, 0, 142, 131,
	162, 0, 132, 141, 114, 154, 136, 161, 193, 169,
	152, 168, 80, 151, 160, 91, 144, 82, 158, 149,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	155, 156, 94, 176, 85, 167, 84, 86, 166, 127,
	153, 159, 121, 118, 83, 157, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 148, 164, 177, 88, 0, 0, 170, 171, 172,
	173, 0, 0, 89, 126, 87, 105, 145, 108, 115,
	138, 175, 130, 143, 92, 163, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 79, 97, 112, 174, 137, 99,
	165, 111, 0, 113, 0, 0, 147, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 590, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 135, 0, 0, 150,
	102, 101, 140, 110, 0, 0, 0, 93, 0, 142,
	131, 162, 0, 132, 141, 114, 154, 136, 161, 193,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 176, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	0, 0, 148, 164, 177, 88, 0, 0, 170, 171,
	172, 173, 0, 0, 89, 126, 87, 105, 145, 108,
	115, 138, 175, 130, 143, 92, 163, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 79, 97, 112, 174, 137,
	99, 165, 111, 0, 113, 0, 0, 147, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 493, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 135, 0, 0,
	150, 102, 101, 140, 110, 0, 0, 0, 93, 0,
	142, 131, 162, 0, 132, 141, 114, 154, 136, 161,
	193, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 176, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 148, 164, 177, 88, 0, 0, 170,
	171, 172, 173, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 175, 130, 143, 92, 163, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 79, 0, 112, 174,
	137, 99, 165, 566, 97, 0, 0, 0, 0, 0,
	111, 0, 113, 0, 0, 147, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 135, 0, 0, 150, 102,
	101, 140, 110, 0, 0, 0, 93, 0, 142, 131,
	162, 0, 132, 141, 114, 154, 136, 161, 193, 169,
	152, 168, 80, 151, 160, 91, 144, 82, 158, 149,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	155, 156, 94, 176, 85, 167, 84, 86, 166, 127,
	153, 159, 121, 118, 83, 157, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 148, 164, 177, 88, 0, 0, 170, 171, 172,
	173, 0, 0, 89, 126, 87, 105, 145, 108, 115,
	138, 175, 130, 143, 92, 163, 146, 0, 0, 310,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 79, 97, 112, 174, 137, 99,
	165, 111, 0, 113, 0, 0, 147, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 135, 0, 0, 150,
	102, 101, 140, 110, 0, 0, 0, 93, 0, 142,
	131, 162, 0, 132, 141, 114, 154, 136, 161, 193,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 176, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	0, 0, 148, 164, 177, 88, 0, 0, 170, 171,
	172, 173, 0, 0, 89, 126, 87, 105, 145, 108,
	115, 138, 175, 130, 143, 92, 163, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 79, 97, 112, 174, 137,
	99, 165, 111, 0, 113, 0, 0, 147, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 192, 0, 0, 0, 0, 135, 0, 0,
	150, 102, 101, 140, 110, 0, 0, 0, 93, 0,
	142, 131, 162, 0, 132, 141, 114, 154, 136, 161,
	193, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 176, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 148, 164, 177, 88, 0, 0, 170,
	171, 172, 173, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 175, 130, 143, 92, 163, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 79, 97, 112, 174,
	137, 99, 165, 111, 0, 113, 0, 0, 147, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 135, 0,
	0, 150, 102, 101, 140, 110, 0, 0, 0, 93,
	0, 142, 131, 162, 0, 132, 141, 114, 154, 136,
	161, 193, 169, 152, 168, 80, 151, 160, 91, 144,
	82, 158, 149, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 155, 156, 94, 176, 85, 167, 84,
	86, 166, 127, 153, 159, 121, 118, 83, 157, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 148, 164, 177, 88, 0, 0,
	170, 171, 172, 173, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 175, 130, 143, 92, 163, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 79, 97, 112,
	174, 137, 99, 165, 111, 0, 113, 0, 0, 147,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 135,
	0, 0, 150, 102, 101, 140, 110, 0, 0, 0,
	93, 0, 142, 131, 162, 0, 132, 141, 114, 154,
	136, 161, 193, 169, 152, 168, 80, 151, 160, 91,
	144, 82, 158, 149, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 155, 156, 94, 176, 85, 167,
	84, 86, 166, 127, 153, 159, 121, 118, 83, 157,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 0, 0, 148, 164, 177, 88, 0,
	0, 170, 171, 172, 173, 0, 0, 89, 126, 87,
	105, 145, 108, 115, 138, 175, 130, 143, 92, 163,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 79, 97,
	112, 174, 137, 99, 165, 111, 0, 113, 0, 0,
	147, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	135, 0, 0, 150, 102, 101, 140, 110, 0, 0,
	0, 93, 0, 142, 131, 162, 0, 132, 141, 114,
	154, 136, 161, 193, 169, 152, 168, 80, 151, 160,
	91, 144, 82, 158, 149, 120, 106, 107, 81, 0,
	139, 96, 100, 95, 128, 155, 156, 94, 176, 85,
	167, 84, 86, 166, 127, 153, 159, 121, 118, 83,
	157, 119, 117, 109, 98, 103, 133, 116, 134, 104,
	124, 123, 125, 0, 0, 0, 148, 164, 177, 88,
	0, 0, 170, 171, 172, 173, 0, 0, 89, 126,
	87, 105, 145, 108, 115, 138, 175, 130, 143, 92,
	163, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 112, 174, 137, 99, 165,
}
var yyPact = [...]int{

	2092, -1000, -179, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 875, 901, -1000, -1000, -1000, -1000, -1000, -1000, 698,
	7403, 73, 112, -8, 9859, 107, 1359, 10301, -1000, 5,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -85, -86, 654,
	-1000, -1000, -1000, -1000, -1000, 869, 873, 689, 859, 765,
	-1000, 5569, 78, 8747, 9638, 4861, -1000, 530, 102, 10301,
	-149, 10080, 68, 68, 68, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 98, 10301,
	-1000, 10301, 65, 524, 65, 65, 65, 10301, -1000, 146,
	-1000, -1000, -1000, -1000, 10301, 522, 792, 34, 2869, 2869,
	2869, 2869, 10, 2869, -64, 706, 886, -1000, -1000, -1000,
	-1000, 2869, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 453, 800, 6280, 6280, 875, -1000,
	654, -1000, -1000, -1000, 794, -1000, -1000, 312, 891, -1000,
	7182, 145, -1000, 6280, 1865, 638, -1000, -1000, 638, -1000,
	-1000, 131, -1000, -1000, 6734, 6734, 6734, 6734, 6734, 6734,
	6734, 6734, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 638, -1000, 6044, 638,
	638, 638, 638, 638, 638, 638, 638, 6280, 638, 638,
	638, 638, 638, 638, 638, 638, 638, 638, 638, 638,
	638, 9417, 633, 682, -1000, -1000, -1000, 839, 7857, 8526,
	10301, 602, -1000, 634, 4612, -103, -1000, -1000, -1000, 209,
	8305, -1000, -1000, -1000, 791, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 528,
	-1000, 1630, 521, 2869, 91, 646, 520, 239, 519, 10301,
	10301, 2869, 82, 10301, 835, 705, 10301, 503, 499, -1000,
	4363, -1000, 2869, 2869, 2869, 2869, 2869, 2869, 2869, 2869,
	-1000, -1000, -1000, -1000, -1000, -1000, 2869, 2869, -1000, 889,
	288, -1000, -1000, 10301, 6280, -1000, -1000, -1000, -1000, -1000,
	-1000, 896, 173, 418, 144, 635, -1000, 388, 869, 453,
	765, 8078, 716, -1000, -1000, 10301, -1000, 6280, 6280, 261,
	-1000, 9189, -1000, -1000, 3367, 194, 6734, 375, 252, 6734,
	6734, 6734, 6734, 6734, 6734, 6734, 6734, 6734, 6734, 6734,
	6734, 6734, 6734, 6734, 383, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 496, -1000, 654, 717, 717, 156, 156,
	156, 156, 156, 156, 156, 6961, 5097, 453, 513, 213,
	6044, 5569, 5569, 6280, 6280, 10522, 10522, 5569, 864, 216,
	213, 10522, -1000, 453, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5569, 5569, 5569, 5569, 44, 10301, -1000, 10522, 8747,
	8747, 8747, 8747, 8747, -1000, 758, 757, -1000, 747, 741,
	753, 10301, -1000, 509, 7857, 167, 638, -1000, 8968, -1000,
	-1000, 44, 613, 8747, 10301, -1000, -1000, 4114, 634, -103,
	631, -1000, -113, -119, 5805, 155, -1000, -1000, -1000, -1000,
	2620, 192, 310, -57, -1000, -1000, -1000, 647, -1000, 647,
	647, 647, 647, -24, -24, -24, -24, -1000, -1000, -1000,
	-1000, -1000, 695, 694, -1000, 647, 647, 647, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 687, 687, 687, 660, 660, 693,
	-1000, 10301, -166, 493, 2869, 834, 2869, -1000, 92, -1000,
	10301, -1000, -1000, 10301, 2869, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10301, 266, 10301, 10301, -1000, 213, -1000, 772, 6280, 6280,
	3865, 6280, -1000, -1000, -1000, 800, -1000, 864, 876, -1000,
	784, 782, 5569, -1000, -1000, 194, 217, -1000, -1000, 267,
	-1000, -1000, -1000, -1000, 143, 638, -1000, 1776, -1000, -1000,
	-1000, -1000, 375, 6734, 6734, 6734, 75, 1776, 2086, 667,
	523, 156, 319, 319, 157, 157, 157, 157, 157, 298,
	298, -1000, -1000, -1000, 453, -1000, -1000, -1000, 453, 5569,
	632, -1000, -1000, 6280, -1000, 453, 489, 489, 399, 413,
	658, -1000, 137, 645, 489, 5569, 229, -1000, 6280, 453,
	-1000, 489, 453, 489, 489, 556, 638, -1000, 641, -1000,
	202, 682, 692, 704, 1009, -1000, -1000, -1000, -1000, 754,
	-1000, 730, -1000, -1000, -1000, -1000, -1000, 100, 99, 94,
	10080, -1000, 884, 8747, 595, -1000, -1000, 631, -103, -107,
	-1000, -1000, -1000, 213, -1000, 490, 627, 2371, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 681, 465, -1000, 827, 182,
	185, 443, 816, -1000, -1000, 795, -1000, 250, -60, -1000,
	-1000, 354, -24, -24, -1000, -1000, 155, 790, 155, 155,
	155, 402, 402, -1000, -1000, -1000, -1000, 348, -1000, -1000,
	-1000, 347, -1000, 702, 10080, 2869, -1000, 3616, -1000, -1000,
	-1000, -1000, -1000, -1000, 410, 260, 204, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42, -1000,
	2869, -1000, 288, -1000, 394, 6280, -1000, -1000, 773, 213,
	213, 136, -1000, -1000, 10301, -1000, -1000, -1000, -1000, 623,
	-1000, -1000, -1000, 3118, 5569, -1000, 75, 1776, 2071, -1000,
	6734, 6734, -1000, -1000, 489, 5569, 213, -1000, -1000, -1000,
	54, 383, 54, 6734, 6734, 3865, 6734, 6734, -160, 617,
	223, -1000, 6280, 338, -1000, -1000, -1000, -1000, -1000, 701,
	10522, 638, -1000, 7630, 10080, 875, 10522, 6280, 6280, -1000,
	-1000, 6280, 668, -1000, 6280, -1000, -1000, -1000, 638, 638,
	638, 463, -1000, 875, 595, -1000, -1000, -1000, -115, -133,
	-1000, -1000, 2620, -1000, 2620, 10080, 57, -1000, 431, 426,
	-1000, -1000, 662, 669, 43, -1000, -1000, -1000, 536, 155,
	155, -1000, 193, -1000, -1000, -1000, 478, -1000, 475, 626,
	473, 10301, -1000, -1000, 621, -1000, 199, -1000, -1000, 10080,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10080, 10301, -1000, -1000, -1000, -1000, -1000, 10080,
	-1000, 266, -1000, 213, -1000, 3616, -1000, 884, 8747, -1000,
	-1000, 453, -1000, 6734, 1776, 1776, -1000, -1000, 453, 647,
	647, -1000, 647, 660, -1000, 647, -5, 647, -6, 453,
	453, 1488, 1815, -1000, 1327, 771, 638, -156, -1000, 213,
	6280, -1000, 796, 592, 550, -1000, -1000, 5333, 453, 471,
	135, 463, 869, -1000, 213, 213, 213, 10080, 213, 10080,
	10080, 10080, 1863, 10080, 869, -1000, -1000, -1000, -1000, 2371,
	-1000, 452, -1000, 647, -1000, -1000, -1000, 10080, -52, 895,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -24, 392, -24, 346, -1000, 324, 2869, 3616, 2620,
	-1000, 644, -1000, -1000, -1000, -1000, 830, -1000, 880, 618,
	-1000, 1776, -1000, -1000, 97, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6734, 6734, -1000, 6734, 6734, 6734,
	453, 369, 213, 810, -1000, 638, -1000, -1000, 625, 10080,
	10080, -1000, -1000, 449, -1000, 447, 447, 447, 167, -1000,
	-1000, 139, 10080, -1000, 442, 169, -1000, -137, 155, -1000,
	155, 532, 510, -1000, -1000, -1000, 10080, 638, 877, 872,
	-1000, -1000, 1552, 1552, 1552, 1552, 41, -1000, -1000, 894,
	-1000, 638, -1000, 654, 129, -1000, 10080, -1000, -1000, -1000,
	-1000, -1000, 139, -1000, 408, 189, 368, -1000, 52, 258,
	804, -1000, 801, -1000, -1000, -1000, -1000, -1000, 425, 40,
	-1000, 6280, 6280, -1000, -1000, -1000, -1000, 453, 39, -170,
	10522, 550, 453, 10080, -1000, -1000, -1000, 320, -1000, -1000,
	10301, -1000, 364, -1000, -1000, 646, 423, -1000, 10080, 213,
	545, -1000, 770, -163, -175, 491, -1000, -1000, -1000, 643,
	-1000, -166, -1000, 40, 779, -1000, 763, -1000, 10080, -1000,
	-1000, 32, -167, 407, 17, -172, -1000, 638, -176, 6507,
	-1000, 1552, 453, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1151, 50, 477, 1147, 1146, 1145, 1144, 1143, 1142,
	1141, 1140, 1139, 1138, 1137, 1136, 1135, 1129, 1127, 1125,
	1124, 1123, 1122, 1121, 101, 1107, 1106, 1102, 60, 1101,
	73, 1100, 1099, 32, 239, 36, 30, 7, 1096, 21,
	63, 56, 1095, 48, 1093, 1090, 74, 1089, 61, 1088,
	1087, 645, 1086, 1083, 10, 26, 1078, 1074, 1071, 1070,
	69, 670, 1068, 1066, 1065, 1064, 1063, 1060, 41, 3,
	9, 22, 12, 1049, 166, 11, 1045, 40, 1042, 1041,
	1040, 1039, 23, 1034, 45, 1032, 15, 44, 1027, 5,
	54, 27, 25, 8, 71, 49, 1026, 24, 53, 43,
	1025, 1024, 403, 1023, 1018, 37, 1016, 33, 153, 381,
	1006, 1005, 1004, 1003, 28, 0, 402, 493, 57, 1002,
	1001, 998, 1193, 80, 59, 19, 997, 52, 1260, 39,
	994, 990, 34, 987, 986, 985, 983, 970, 967, 963,
	82, 962, 958, 957, 58, 62, 955, 953, 55, 18,
	951, 950, 946, 29, 46, 945, 944, 42, 942, 941,
	939, 937, 17, 14, 935, 13, 934, 6, 920, 20,
	918, 1, 917, 16, 916, 2, 914, 4, 47, 910,
	909, 67, 253, 908, 907, 78,
}
var yyR1 = [...]int{

	0, 179, 180, 180, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 27, 27, 8, 9, 9, 9,
	183, 183, 46, 46, 90, 90, 10, 10, 10, 10,
	95, 95, 99, 99, 99, 100, 100, 100, 100, 130,
	130, 11, 11, 11, 11, 11, 11, 11, 177, 177,
	176, 175, 175, 174, 174, 173, 16, 159, 160, 160,
	160, 160, 154, 133, 133, 133, 133, 136, 136, 134,
	134, 134, 134, 134, 134, 134, 135, 135, 135, 135,
	135, 137, 137, 137, 137, 137, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 139, 139, 139, 139, 139, 139, 139, 139, 153,
	153, 140, 140, 148, 148, 149, 149, 149, 146, 146,
	147, 147, 150, 150, 150, 141, 141, 141, 141, 141,
	141, 141, 143, 143, 151, 151, 144, 144, 144, 145,
	145, 152, 152, 152, 152, 152, 142, 142, 155, 155,
	168, 168, 167, 167, 167, 158, 158, 164, 164, 164,
	164, 164, 157, 157, 166, 166, 165, 156, 156, 169,
	161, 161, 161, 162, 162, 162, 163, 163, 163, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 172,
	170, 170, 171, 171, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 106,
	106, 104, 104, 105, 105, 105, 107, 107, 107, 131,
	131, 131, 19, 19, 21, 21, 22, 23, 20, 20,
	20, 20, 20, 20, 20, 184, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 119, 119, 119,
	118, 118, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 91, 91, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 126, 126, 125,
	125, 125, 124, 124, 47, 47, 47, 49, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 37, 37, 37, 37, 37, 37,
	37, 103, 103, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 33, 33,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 65, 65,
	65, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 64, 64, 185, 185, 66, 66, 66, 66,
	31, 31, 31, 31, 31, 129, 129, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	78, 78, 32, 32, 76, 76, 77, 79, 79, 75,
	75, 75, 60, 60, 60, 60, 60, 60, 60, 60,
	62, 62, 62, 80, 80, 81, 81, 82, 82, 83,
	83, 84, 85, 85, 85, 86, 86, 86, 86, 87,
	87, 87, 59, 59, 59, 59, 59, 59, 88, 88,
	88, 88, 92, 92, 70, 70, 72, 72, 71, 73,
	93, 93, 97, 94, 94, 98, 98, 98, 96, 96,
	96, 121, 121, 121, 101, 101, 108, 108, 109, 109,
	102, 102, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 111, 111, 111, 112, 112, 113, 113, 113,
	120, 120, 116, 116, 117, 117, 122, 122, 123, 123,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 181, 182, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 8, 4, 6, 5, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 1, 3,
	3, 3, 8, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 1, 3, 2, 3, 1, 10,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 7, 5, 4,
	2, 2, 4, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 3, 3, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -179, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	114, 115, 117, 116, 143, 118, 136, 50, 155, 156,
	158, 159, 25, 137, 138, 141, 142, 31, 32, -181,
	8, 239, 54, -180, 254, -82, 15, -26, 5, -24,
	-184, -24, -24, -24, -24, -24, -159, 54, -113, 123,
	71, 151, 231, 120, 121, 127, -116, 57, -115, 247,
	155, 166, 160, 187, 179, 177, 180, 218, 207, 216,
	66, 158, 227, 139, 175, 171, 169, 27, 192, 252,
	170, 133, 132, 193, 197, 219, 164, 165, 221, 191,
	135, 33, 249, 35, 147, 222, 195, 190, 186, 189,
	163, 185, 39, 199, 198, 200, 217, 182, 172, 18,
	225, 142, 145, 194, 196, 128, 149, 251, 223, 168,
	134, 146, 141, 226, 159, 220, 229, 38, 204, 162,
	131, 156, 153, 183, 148, 173, 174, 188, 161, 184,
	157, 150, 143, 228, 205, 253, 181, 178, 154, 152,
	210, 211, 212, 213, 250, 224, 176, 206, -102, 123,
	125, 121, 121, 122, 123, 231, 120, 121, -51, -122,
	57, -115, 123, 151, 121, 107, 180, 114, 208, 122,
	33, 149, -131, 121, -104, 152, 207, 210, 211, 212,
	213, 57, 220, 219, 214, -122, 157, -127, -127, -127,
	-127, -127, 209, 209, -2, -86, 17, 16, -5, -3,
	-181, 6, 20, 21, -30, 40, 41, -25, -36, 98,
	-37, -122, -56, 73, -61, 29, 57, -115, 23, -60,
	-57, -75, -73, -74, 107, 108, 109, 96, 97, 104,
	74, 110, -65, -63, -64, -66, 59, 58, 67, 60,
	61, 62, 63, 68, 69, 70, -116, -71, -181, 44,
	45, 240, 241, 242, 243, 246, 244, 76, 34, 230,
	238, 237, 236, 234, 235, 232, 233, 126, 231, 102,
	239, -102, -39, -40, -41, -42, -53, -74, -181, -51,
	11, -46, -51, -94, -130, 157, -98, 220, 219, -117,
	-96, -116, -114, 218, 180, 217, 119, 72, 22, 24,
	202, 75, 107, 16, 76, 106, 240, 114, 48, 232,
	233, 230, 242, 243, 231, 208, 29, 10, 25, 137,
	21, 100, 116, 79, 80, 140, 23, 138, 70, 19,
	51, 11, 13, 14, 126, 125, 91, 122, 46, 8,
	110, 26, 88, 42, 28, 44, 89, 17, 234, 235,
	31, 246, 144, 102, 49, 36, 73, 68, 52, 71,
	15, 47, 90, 117, 239, 45, 120, 6, 245, 30,
	136, 43, 121, 209, 78, 124, 69, 5, 127, 32,
	9, 50, 53, 236, 237, 238, 34, 77, 12, -160,
	-154, 57, 122, -51, 239, -116, -109, 126, -109, -109,
	121, -51, -51, -108, 126, 57, -108, -108, -108, -51,
	111, -51, 57, 30, 231, 57, 149, 121, 150, 123,
	-128, -181, -117, -128, -128, -128, 153, 154, -128, 216,
	-106, 209, 215, 52, 12, -128, -127, -127, -182, 56,
	-87, 19, 31, -37, -122, -83, -84, -37, -82, -2,
	-24, 36, -28, 21, 65, 11, -119, 72, 71, 88,
	-118, 22, -116, 59, 111, -37, -58, 91, 73, 89,
	90, 75, 93, 92, 103, 96, 97, 98, 99, 100,
	101, 102, 94, 95, 106, 81, 82, 83, 84, 85,
	86, 87, -103, -181, -74, -181, 112, 113, -61, -61,
	-61, -61, -61, -61, -61, -61, -181, -2, -69, -37,
	-181, -181, -181, -181, -181, -181, -181, -181, -181, -78,
	-37, -181, -185, -181, -185, -185, -185, -185, -185, -185,
	-185, -181, -181, -181, -181, -52, 26, -51, 30, 55,
	-47, -49, -48, -50, 42, 46, 48, 43, 44, 45,
	49, -126, 22, -39, -181, -125, 145, -124, 22, -122,
	59, -51, -46, -183, 55, 11, 53, 55, -94, 157,
	-95, -99, 221, 223, 81, -121, -116, 59, 29, 30,
	56, 55, -133, -136, -138, -137, -139, -134, -135, 177,
	178, 107, 181, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 30, 139, 173, 174, 175, 176, 193,
	194, 195, 196, 197, 198, 199, 200, 160, 161, 162,
	163, 164, 165, 166, 168, 169, 170, 171, 172, 57,
	-128, 123, -177, 53, 57, 73, 57, -51, -51, -128,
	124, -51, 23, 52, -51, 57, 57, -123, -122, -114,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	11, -105, 11, 91, -51, -37, 9, 91, 55, 18,
	111, 55, -85, 24, 25, -86, -182, -30, -62, -116,
	60, 63, -29, 43, -51, -37, -37, -67, 68, 73,
	69, 70, -118, 98, -123, -117, -114, -61, -68, -71,
	-74, 64, 91, 89, 90, 75, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -129, 57, 59, 57, -60, -60, -116, -35, 21,
	-34, -36, -182, 55, -182, -2, -34, -34, -37, -37,
	-75, -116, -122, -75, -34, -28, -76, -77, 77, -75,
	-182, -34, -35, -34, -34, -90, 145, -51, -93, -97,
	-75, -40, -41, -41, -40, -41, 42, 42, 42, 47,
	42, 47, 42, -48, -122, -182, -54, 50, 125, 51,
	-181, -124, -90, 53, -39, -51, -98, -95, 55, 222,
	224, 225, 52, -37, -145, 106, -161, -162, -163, -117,
	59, 60, -154, -155, -156, -164, 130, -169, 128, 131,
	127, -157, 133, 122, 28, -150, 68, 73, -146, 205,
	-140, 54, -140, -140, -140, -140, -144, 180, -144, -144,
	-144, 54, 54, -140, -140, -140, -148, 54, -148, -148,
	-149, 54, -149, -120, 53, -51, -175, 250, -176, 57,
	-128, 23, -128, -110, 119, 116, 117, -172, 115, 202,
	180, 66, 29, 15, 240, 145, 253, 57, 146, -51,
	-51, -128, -51, -107, 89, 12, -122, -122, 38, -37,
	-37, -123, -84, -87, -101, 19, 11, 34, 34, -34,
	68, 69, 70, 111, -181, -68, -61, -61, -61, -33,
	140, 72, -182, -182, -34, 55, -37, -182, -182, -182,
	55, 53, 22, 55, 11, 111, 55, 11, -182, -34,
	-79, -77, 79, -37, -182, -182, -182, -182, -182, -59,
	30, 34, -2, -181, -181, -55, 55, 12, 81, -44,
	-43, 52, 53, -45, 52, -43, 42, 42, 122, 122,
	122, -91, -116, -55, -39, -55, -99, -100, 226, 223,
	229, 57, 55, -163, 81, 54, 57, 28, -157, -157,
	57, 57, 28, -141, 29, 68, -147, 206, 60, -144,
	-144, -145, 30, -145, -145, -145, -153, 59, -153, 60,
	60, 52, -116, -128, -174, -173, -117, -127, -178, 151,
	129, 130, 133, 132, 57, 122, 28, 128, 131, 145,
	127, -178, 151, -111, -112, 124, 22, 122, 28, 145,
	-128, -105, 59, -37, 39, 111, -51, -38, 11, 98,
	-117, -35, -33, 72, -61, -61, -182, -36, -132, 107,
	177, 139, 175, 171, 191, 182, 204, 173, 205, -129,
	-132, -61, -61, -117, -61, -61, 247, -82, 80, -37,
	78, -92, 52, -93, -70, -72, -71, -181, -2, -88,
	-116, -91, -82, -97, -37, -37, -37, 54, -37, -181,
	-181, -181, -182, 55, -82, -55, 223, 227, 228, -162,
	-163, -166, -165, -116, -169, 57, 57, 54, -143, 52,
	59, 60, 61, 68, 230, 67, 56, -145, -145, 57,
	107, 56, 55, 56, 55, 56, 55, -51, 55, 81,
	-127, -116, -127, -116, -51, -127, -116, -107, -55, -39,
	-182, -61, -182, -140, -140, -140, -149, -140, 165, -140,
	165, -182, -182, -182, 55, 19, -182, 55, 19, -181,
	-32, 245, -37, 27, -92, 55, -182, -182, -182, 55,
	111, -182, -86, -89, -116, -89, -89, -89, -125, -116,
	-86, 56, 55, -140, -89, -151, 202, 9, -144, 59,
	-144, 60, 60, -128, -173, -163, 54, 26, -80, 13,
	-144, 57, -61, -61, -61, -61, -61, -182, 59, 28,
	-72, 34, -2, -181, -116, -116, 55, 56, -182, -182,
	-182, -54, -168, -167, 53, 135, 66, -165, 56, -152,
	128, 28, 127, 230, -145, -145, 56, 56, -89, -181,
	-81, 14, 16, -182, -182, -182, -182, -31, 91, 250,
	9, -70, -2, 111, -116, -167, 57, -158, 81, 59,
	134, -142, 66, 28, 28, 56, -170, -171, 145, -37,
	-69, -182, 248, 49, 251, -93, -182, -116, 60, -51,
	59, -177, -182, 55, -116, 39, 249, 252, 54, -175,
	-171, 34, 39, -89, 147, 250, 56, 148, 251, -181,
	252, -61, 144, -182, -182,
}
var yyDef = [...]int{

	22, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 517, 0, 285, 285, 285, 285, 285, 285, 0,
	587, 570, 0, 0, 0, 0, -2, 273, 274, 0,
	276, 277, 796, 796, 796, 796, 796, 0, 0, 0,
	34, 35, 794, 1, 3, 525, 0, 0, 289, 292,
	287, 0, 570, 0, 0, 0, 61, 0, 0, 783,
	0, 784, 568, 568, 568, 588, 589, 592, 593, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 0, 0,
	571, 0, 566, 0, 566, 566, 566, 0, 231, 356,
	596, 597, 783, 784, 0, 0, 0, 0, 797, 797,
	797, 797, 0, 797, 0, 250, 251, 254, 255, 256,
	257, 797, 270, 271, 262, 272, 275, 278, 279, 280,
	281, 282, 796, 796, 28, 529, 0, 0, 517, 30,
	0, 285, 290, 291, 295, 293, 294, 286, 0, 303,
	307, 0, 364, 0, 369, 371, -2, -2, 0, 406,
	407, 408, 409, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 434, 435, 436, 437, 502, 503, 504, 505,
	506, 507, 508, 509, 373, 374, 499, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 490, 0, 464,
	464, 464, 464, 464, 464, 464, 464, 0, 0, 0,
	0, 0, 0, 314, 316, 317, 318, 337, 0, 339,
	0, 0, 42, 46, 0, 774, 553, -2, -2, 0,
	0, 594, 595, -2, 700, -2, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 0,
	78, 0, 0, 797, 0, 68, 0, 0, 0, 0,
	0, 797, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 232, 797, 797, 797, 797, 797, 797, 797, 797,
	241, 798, 799, 242, 243, 244, 797, 797, 246, 0,
	263, 259, 260, 0, 0, 258, 283, 284, 29, 795,
	23, 0, 0, 526, 0, 518, 519, 522, 525, 28,
	292, 0, 297, 296, 288, 0, 304, 0, 0, 0,
	308, 0, 310, 311, 0, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 391, 392, 393, 394, 395,
	396, 397, 370, 0, 384, 0, 0, 0, 426, 427,
	428, 429, 430, 431, 432, 0, 299, 28, 0, 404,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 0,
	491, 0, 456, 0, 457, 458, 459, 460, 461, 462,
	463, 0, 299, 0, 0, 44, 0, 355, 0, 0,
	0, 0, 0, 0, 344, 0, 0, 347, 0, 0,
	0, 0, 338, 0, 0, 358, 746, 340, 0, 342,
	343, -2, 0, 0, 0, 40, 41, 0, 47, 774,
	49, 50, 0, 0, 0, 159, 561, 562, 563, 559,
	190, 0, 142, 138, 84, 85, 86, 131, 88, 131,
	131, 131, 131, 156, 156, 156, 156, 114, 115, 116,
	117, 118, 0, 0, 101, 131, 131, 131, 105, 121,
	122, 123, 124, 125, 126, 127, 128, 89, 90, 91,
	92, 93, 94, 95, 133, 133, 133, 135, 135, 590,
	63, 0, 71, 0, 797, 0, 797, 76, 0, 206,
	0, 225, 567, 0, 797, 228, 229, 357, 598, 599,
	233, 234, 235, 236, 237, 238, 239, 240, 245, 249,
	0, 266, 0, 0, 253, 252, 530, 0, 0, 0,
	0, 0, 521, 523, 524, 529, 31, 295, 0, 510,
	0, 0, 0, 298, 26, 365, 366, 368, 385, 0,
	387, 389, 309, 305, 0, 500, -2, 375, 376, 400,
	401, 402, 0, 0, 0, 0, 398, 380, 0, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	422, 425, 475, 476, 0, 423, 424, 433, 0, 0,
	300, 301, 403, 0, 548, 28, 0, 0, 0, 0,
	0, 499, 0, 0, 0, 0, 497, 494, 0, 0,
	465, 0, 0, 0, 0, 0, 0, 354, 362, 550,
	0, 315, 333, 335, 0, 330, 345, 346, 348, 0,
	350, 0, 352, 353, 319, 320, 321, 0, 0, 0,
	0, 341, 362, 0, 362, 43, 554, 48, 0, 0,
	53, 54, 555, 556, 557, 0, 77, 191, 193, 196,
	197, 198, 79, 80, 81, 0, 0, 188, 0, 0,
	0, 0, 0, 182, 183, 145, 143, 0, 140, 139,
	87, 0, 156, 156, 108, 109, 159, 0, 159, 159,
	159, 0, 0, 102, 103, 104, 96, 0, 97, 98,
	99, 0, 100, 0, 0, 797, 65, 0, 69, 70,
	66, 569, 67, 796, 0, 0, 582, 207, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 0, 224,
	797, 227, 263, 248, 0, 0, 264, 265, 0, 527,
	528, 0, 520, 24, 0, 564, 565, 511, 512, 312,
	386, 388, 390, 0, 299, 377, 398, 381, 0, 378,
	0, 0, 372, 438, 0, 0, 405, -2, 441, 442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 517,
	0, 495, 0, 0, 455, 466, 467, 468, 469, 542,
	0, 0, -2, 0, 0, 517, 0, 0, 0, 327,
	334, 0, 0, 328, 0, 329, 349, 351, 0, 0,
	0, 0, 325, 517, 362, 39, 51, 52, 0, 0,
	58, 160, 0, 194, 0, 0, 0, 177, 0, 0,
	180, 181, 0, 152, 0, 144, 83, 141, 0, 159,
	159, 110, 0, 111, 112, 113, 0, 129, 0, 0,
	0, 0, 591, 64, 72, 73, 0, 199, 796, 0,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 796, 0, 0, 796, 583, 584, 585, 586, 0,
	226, 266, 267, 268, 531, 0, 25, 362, 0, 306,
	501, 0, 379, 0, 399, 382, 439, 302, 0, 131,
	131, 480, 131, 135, 483, 131, 485, 131, 488, 0,
	0, 0, 0, 500, 0, 0, 0, 492, 454, 498,
	0, 32, 0, 542, 532, 544, 546, 0, 28, 0,
	538, 0, 525, 551, 363, 552, 331, 0, 336, 0,
	0, 0, 339, 0, 525, 38, 55, 56, 57, 192,
	195, 0, 184, 131, 187, 178, 179, 0, 154, 0,
	146, 147, 148, 149, 150, 151, 132, 106, 107, 157,
	158, 156, 0, 156, 0, 136, 0, 797, 0, 0,
	200, 0, 201, 203, 204, 205, 0, 247, 513, 313,
	440, 383, 443, 477, 156, 481, 482, 484, 486, 487,
	489, 445, 444, 446, 0, 0, 449, 0, 0, 0,
	0, 0, 496, 0, 33, 0, 547, -2, 0, 0,
	0, 45, 36, 0, 323, 0, 0, 0, 358, 326,
	37, 169, 0, 186, 0, 161, 155, 0, 159, 130,
	159, 0, 0, 62, 74, 75, 0, 0, 515, 0,
	478, 479, 0, 0, 0, 0, 470, 453, 493, 0,
	545, 0, -2, 0, 540, 539, 0, 332, 359, 360,
	361, 322, 168, 170, 0, 175, 0, 185, 0, 166,
	0, 163, 165, 153, 119, 120, 134, 137, 0, 0,
	27, 0, 0, 447, 448, 450, 451, 0, 0, 0,
	0, 535, 28, 0, 324, 171, 172, 0, 176, 174,
	0, 82, 0, 162, 164, 68, 0, 220, 0, 516,
	514, 452, 0, 0, 0, 543, -2, 541, 173, 0,
	167, 71, 219, 0, 0, 471, 0, 474, 0, 202,
	221, 0, 472, 0, 0, 0, 189, 0, 0, 0,
	473, 0, 0, 222, 223,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 111, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 254,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:306
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:311
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:312
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:316
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:337
		{
			setParseTree(yylex, nil)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:395
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:419
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:448
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:449
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:462
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:547
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:552
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:556
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:560
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:568
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:572
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:577
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:581
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:587
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:592
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:597
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:603
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:608
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:614
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:620
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:627
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:634
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:639
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:643
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:647
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:653
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:675
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:867
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:872
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:877
		{
			yyVAL.optVal = nil
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:881
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:886
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:890
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:898
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:902
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:908
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:916
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:920
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:925
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:935
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:948
		{
			yyVAL.optVal = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:960
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:964
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:968
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:972
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:977
		{
			yyVAL.optVal = nil
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:981
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:990
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:995
		{
			yyVAL.str = ""
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:999
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.colKeyOpt = colKey
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1072
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 189:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.str = yyDollar[1].str
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1236
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1241
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 222:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 223:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1301
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1309
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1314
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1404
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1409
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &yyDollar[4].expr}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.str = ""
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.str = "full "
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.showFilter = nil
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.str = SessionStr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.str = GlobalStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.statement = &Begin{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.statement = &Begin{}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.statement = &Commit{}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.statement = &Rollback{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.statement = &OtherRead{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.statement = &OtherRead{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.statement = &OtherRead{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1590
		{
			setAllowComments(yylex, true)
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.bytes2 = nil
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.str = UnionStr
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.str = UnionAllStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.str = UnionDistinctStr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.str = SQLCacheStr
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.str = DistinctStr
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.str = StraightJoinHint
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.selectExprs = nil
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.str = JoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.str = JoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.str = JoinStr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.str = StraightJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.str = LeftJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.str = LeftJoinStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.str = RightJoinStr
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.str = RightJoinStr
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.str = NaturalJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.indexHints = nil
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.str = IsNullStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.str = IsNotNullStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.str = IsTrueStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.str = IsNotTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.str = IsFalseStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.str = IsNotFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.str = EqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.str = LessThanStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.str = GreaterThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.str = LessEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.str = GreaterEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.str = NotEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.expr = nil
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2224
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2232
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2254
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 450:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 451:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 452:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 453:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.str = ""
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.str = BooleanModeStr
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 473:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.str = QueryExpansionStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.expr = nil
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.str = string("")
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2526
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.expr = nil
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 501:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.expr = &NullVal{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.exprs = nil
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.expr = nil
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.orderBy = nil
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.str = AscScr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.str = AscScr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.str = DescScr
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.limit = nil
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2690
		{
			yyVAL.str = ""
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2694
		{
			yyVAL.str = ForUpdateStr
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2698
		{
			yyVAL.str = ShareModeStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2719
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2724
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2732
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.updateExprs = nil
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2776
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2792
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2818
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2822
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2828
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.bytes = []byte("charset")
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.expr = &Default{}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.byt = 0
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.byt = 1
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2874
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.str = ""
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.str = IgnoreStr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2887
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2891
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2904
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2917
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2941
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2951
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3178
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3187
		{
			decNesting(yylex)
		}
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3192
		{
			forceEOF(yylex)
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3197
		{
			forceEOF(yylex)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3201
		{
			forceEOF(yylex)
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3205
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
